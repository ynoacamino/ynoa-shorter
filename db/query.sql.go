// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
)

const createShorter = `-- name: CreateShorter :one
INSERT INTO url (
  short_url,
  original_url,
  user_id,
  public
) VALUES (
  $1,
  $2,
  $3,
  $4
)
RETURNING url_id, short_url, original_url, user_id, public, created_at, updated_at
`

type CreateShorterParams struct {
	ShortUrl    string
	OriginalUrl string
	UserID      string
	Public      bool
}

func (q *Queries) CreateShorter(ctx context.Context, arg CreateShorterParams) (Url, error) {
	row := q.db.QueryRow(ctx, createShorter,
		arg.ShortUrl,
		arg.OriginalUrl,
		arg.UserID,
		arg.Public,
	)
	var i Url
	err := row.Scan(
		&i.UrlID,
		&i.ShortUrl,
		&i.OriginalUrl,
		&i.UserID,
		&i.Public,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteShorter = `-- name: DeleteShorter :one
DELETE FROM url
WHERE
  url_id = $1
RETURNING url_id, short_url, original_url, user_id, public, created_at, updated_at
`

func (q *Queries) DeleteShorter(ctx context.Context, urlID int32) (Url, error) {
	row := q.db.QueryRow(ctx, deleteShorter, urlID)
	var i Url
	err := row.Scan(
		&i.UrlID,
		&i.ShortUrl,
		&i.OriginalUrl,
		&i.UserID,
		&i.Public,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPrivateShorters = `-- name: GetPrivateShorters :many
SELECT
  url_id, short_url, original_url, user_id, public, created_at, updated_at
FROM
  url
WHERE
  user_id = $1
ORDER BY
  updated_at DESC
`

func (q *Queries) GetPrivateShorters(ctx context.Context, userID string) ([]Url, error) {
	rows, err := q.db.Query(ctx, getPrivateShorters, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.UrlID,
			&i.ShortUrl,
			&i.OriginalUrl,
			&i.UserID,
			&i.Public,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublicShorters = `-- name: GetPublicShorters :many
SELECT
  url_id, short_url, original_url, user_id, public, created_at, updated_at
FROM
  url
WHERE
  public = true
ORDER BY
  updated_at DESC
`

func (q *Queries) GetPublicShorters(ctx context.Context) ([]Url, error) {
	rows, err := q.db.Query(ctx, getPublicShorters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.UrlID,
			&i.ShortUrl,
			&i.OriginalUrl,
			&i.UserID,
			&i.Public,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShorter = `-- name: UpdateShorter :one
UPDATE url
SET
  short_url = $2,
  public = $3,
  updated_at = CURRENT_TIMESTAMP
WHERE
  url_id = $1
RETURNING url_id, short_url, original_url, user_id, public, created_at, updated_at
`

type UpdateShorterParams struct {
	UrlID    int32
	ShortUrl string
	Public   bool
}

func (q *Queries) UpdateShorter(ctx context.Context, arg UpdateShorterParams) (Url, error) {
	row := q.db.QueryRow(ctx, updateShorter, arg.UrlID, arg.ShortUrl, arg.Public)
	var i Url
	err := row.Scan(
		&i.UrlID,
		&i.ShortUrl,
		&i.OriginalUrl,
		&i.UserID,
		&i.Public,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
